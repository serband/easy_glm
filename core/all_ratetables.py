from typing import Dict, Any, List, Callable
import polars as pl
from glum import GeneralizedLinearRegressor
from .prepare import prepare_data
from .ratetable import ratetable

def generate_all_ratetables(
    model: GeneralizedLinearRegressor,
    dataset: pl.DataFrame,
    predictor_variables: List[str],
    blueprint: Dict[str, Any],
    random_seed: int = 42,
) -> Dict[str, pl.DataFrame]:
    """
    Generates rate tables for all specified predictor variables in a model.

    This function iterates through a list of predictor variables, generating a
    rate table for each by calling the `ratetable` function. The results are
    returned as a dictionary mapping variable names to their rate table DataFrames.

    Args:
        model (GeneralizedLinearRegressor): The fitted GLM model.
        dataset (pl.DataFrame): The original input DataFrame (before preparation).
        predictor_variables (List[str]): A list of the names of the predictor
            variables for which to generate rate tables.
        blueprint (Dict[str, Any]): A blueprint dictionary containing the levels or
            breakpoints for each variable, as generated by `generate_blueprint`.
        random_seed (int, optional): A random seed for reproducibility. Defaults to 42.

    Returns:
        Dict[str, pl.DataFrame]: A dictionary where keys are the variable names
        and values are the corresponding Polars DataFrame rate tables.
    
    Example:
        >>> # Assuming 'model', 'df', 'predictor_variables', and 'd' are pre-defined
        >>> all_tables = generate_all_ratetables(
        ...     model=model,
        ...     dataset=df,
        ...     predictor_variables=predictor_variables,
        ...     blueprint=d
        ... )
        >>> print(all_tables['VehAge'])  # Access the rate table for 'VehAge'
    """
    all_ratetables: Dict[str, pl.DataFrame] = {}
    for var in predictor_variables:
        levels = blueprint.get(var)
        if levels is None:
            print(f"Warning: No blueprint found for variable '{var}'. Skipping.")
            continue

        # Define the preparation function to be used by the ratetable function
        prepare_fn = lambda d: prepare_data(
            df=d,
            modelling_variables=predictor_variables,
            formats=blueprint,
            table_name="line_prepped",
        )

        # Generate the rate table for the current variable
        tbl = ratetable(
            model=model,
            dataset=dataset,
            col_name=var,
            levels=levels,
            prepare=prepare_fn,
            random_seed=random_seed,
        )
        all_ratetables[var] = tbl
        
    return all_ratetables
